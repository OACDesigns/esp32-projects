
substitutions:
  device_name: "esp32cam"
  friendly_name: Wifi Camera
  device_description: Basic WIFI camera in an default ESP32-CAM module.

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  comment: ${device_description}


esp32:
  board: esp32cam
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Fallback Hotspot"
    password: "hX3hqBj3Ut60"

captive_portal:

esp32_camera:
  external_clock:
    pin: GPIO0
    frequency: 16MHz  # default 20MHz. It seems that 8MHz or 16MHz causes less interference with wifi
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  # Image settings
  name: video stream
  icon: mdi:video-wireless
  # resolution: 1024x768  # you can use: [1600x1200 , 1280x1024 , 1024x768 , 800x600, 640x480 ] for best performance (FPS) use 1024 or lower resolution.
  resolution: 800x600  # you can use: [1600x1200 , 1280x1024 , 1024x768 , 800x600, 640x480 ] for best performance (FPS) use 1024 or lower resolution.
  max_framerate: 15 fps # [defaults to 10 fps] up to 60Hz, beware of overheating
  idle_framerate: 0.2 fps # [defaults to 0.1 fps] framerate when no client is requesting a full stream

  jpeg_quality: 20  # The JPEG quality to encode images with. From 10 (best) to 63 (worst)
  brightness: 2     # The brightness to apply to the picture, default 0, max 2 
  contrast: 0

  # exposure settings
  aec_mode: auto
  # aec2: true        # enable Auto Exposure Control 2 - changes AE computation method, default is false
  aec2: false
  # ae_level: 0
  ae_level: 2       # auto exposure level, defaults 0
  aec_value: 300
  # gain settings
  agc_mode: auto
  # agc_gain_ceiling: 2x
  agc_gain_ceiling: 32x     # auto gain control (works like ISO). Defaults to 2x. Max is 128x
  agc_value: 0
  # white balance setting
  wb_mode: auto

# http server setting
esp32_camera_web_server:
  - port: 8080
    mode: stream
  - port: 8081
    mode: snapshot
    
output:
  # Red status light
  - platform: gpio
    id: gpio_33
    pin:
      number: GPIO33
      inverted: True
      
  # Flashlight 
  # Here we could simply turn on/off the GPIO and create a binary light control
  # or we use PWM for a dimmable monochrom light (must use channel 2,  channel 1 is used by camera)
  - platform: ledc   
    id: espCamLed
    pin: GPIO4  # GPIO_4 is the flash light pin
    channel: 2

  # Binary light control
  # - platform: gpio
  #   id: espCamLed
  #   pin: GPIO04
  

light:
  # Simple on/off light
  # - platform: binary
  #   name: Flashlight
  #   output: espCamLed

  - platform: monochromatic
    name: Flashlight
    output: espCamLed
    default_transition_length: 300ms

  - platform: binary
    name: Status LED
    output: gpio_33

button:
  - platform: restart
    name: restart
    entity_category: config

# Sensors
sensor:
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 240s
    disabled_by_default: true
    entity_category: diagnostic  

  - platform: uptime
    name: Uptime
    disabled_by_default: true
    entity_category: diagnostic  

  - platform: internal_temperature
    name: "cpu Temperature"
    internal: true

binary_sensor:
  - platform: status
    name: Status
    entity_category: diagnostic  


